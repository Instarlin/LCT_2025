from fastapi import (
    BackgroundTasks,
    Depends,
    FastAPI,
    File,
    Header,
    HTTPException,
    UploadFile,
    WebSocket,
    WebSocketDisconnect,
    status,
    Form,
)
from fastapi.responses import StreamingResponse
from fastapi.security import HTTPBearer
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional
import asyncio
import io
import json
import logging
import mimetypes
import os
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from .minio_client import minio_client
from . import crud, models, schemas, auth, job_crud, minio_utils, zip_utils
from .ml import InferenceRequest, ModelAdapter
from .parsers import parse_job_xlsx
from .database import SessionLocal, engine, get_db
from .db_wait import wait_for_postgres
from .websocket_manager import JobWebSocketManager

app = FastAPI(
    title="California Gold API",
    description="""
    # California Gold API
    
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    
    ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    
    ### üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
    - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ MinIO
    - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è presigned URL
    
    ### üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ü–æ–∏—Å–∫ –ø–æ username
    
    ### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    - –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å PBKDF2-SHA256
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –∏ username
    
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ California Gold API!
    """,
    version="1.0.0",
    contact={
        "name": "California Gold Team",
        "email": "support@californiagold.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...")
if wait_for_postgres():
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    models.Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")

job_ws_manager = JobWebSocketManager()
ML_SERVICE_TOKEN = os.getenv("ML_SERVICE_TOKEN")
model_adapter = ModelAdapter()
logger = logging.getLogger(__name__)


def _job_identifier(job: models.Job) -> str:
    if getattr(job, "uuid", None):
        return str(job.uuid)
    return str(job.id)


def _job_payload(job: models.Job) -> dict:
    job_schema = schemas.JobResponse.model_validate(job)
    return {
        "type": "job.update",
        "job": job_schema.model_dump(mode="json", by_alias=True),
    }


async def broadcast_job_update(job: models.Job) -> None:
    await job_ws_manager.broadcast(_job_identifier(job), _job_payload(job))


def schedule_job_broadcast(background_tasks: BackgroundTasks, job: models.Job) -> None:
    background_tasks.add_task(
        job_ws_manager.broadcast,
        _job_identifier(job),
        _job_payload(job),
    )


def _validate_ml_service_token(auth_header: Optional[str]) -> None:
    expected = ML_SERVICE_TOKEN
    if not expected:
        return
    if not auth_header:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Missing ML service token")

    token = auth_header
    if token.lower().startswith("bearer "):
        token = token[7:]

    if token != expected:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid ML service token")


async def process_job(job_uuid: str, input_object: str) -> None:
    session = SessionLocal()
    try:
        job = job_crud.get_job_by_uuid(session, job_uuid)
        if job is None and job_uuid.isdigit():
            job = job_crud.get_job(session, int(job_uuid))
        if job is not None:
            updated = job_crud.update_job_status(session, job.id, "processing")
            if updated is not None:
                await broadcast_job_update(updated)

        request = InferenceRequest(job_uuid=job_uuid, input_object=input_object)
        await model_adapter.run_inference(request)
    except Exception as exc:
        logger.exception("Inference failed for job %s", job_uuid, exc_info=exc)
        job = job_crud.get_job_by_uuid(session, job_uuid)
        if job is None and job_uuid.isdigit():
            job = job_crud.get_job(session, int(job_uuid))
        if job is not None:
            job.status = "failed"
            session.add(job)
            session.commit()
            session.refresh(job)
            await broadcast_job_update(job)
    finally:
        session.close()

@app.get("/", tags=["üè† –ì–ª–∞–≤–Ω–∞—è"])
def read_root():
    """
    **–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API**
    
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    """
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ California Gold API!",
        "status": "active",
        "version": "1.0.0",
        "team": "California Gold Team",
        "services": {
            "minio": "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω",
            "postgresql": "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
        },
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@app.post("/auth/register", response_model=schemas.UserResponse, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
def register_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**
    - **username**: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:**
    - **email**: Email –∞–¥—Ä–µ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    - **password**: –ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)
    - **full_name**: –ü–æ–ª–Ω–æ–µ –∏–º—è
    - **bio**: –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
    - **avatar_url**: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ email —É–∫–∞–∑–∞–Ω)
    if user.email:
        db_user = crud.get_user_by_email(db, email=user.email)
        if db_user:
            raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
    db_user = crud.get_user_by_username(db, username=user.username)
    if db_user:
        raise HTTPException(status_code=400, detail="Username —É–∂–µ –∑–∞–Ω—è—Ç")
    
    return crud.create_user(db=db, user=user)

@app.post("/auth/login", response_model=schemas.Token, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
def login_user(user_credentials: schemas.UserLogin, db: Session = Depends(get_db)):
    """
    **–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É**
    
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **password**: –ü–∞—Ä–æ–ª—å
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º.
    """
    user = auth.authenticate_user(db, user_credentials.username, user_credentials.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/auth/me", response_model=schemas.UserResponse, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
def read_users_me(current_user: models.User = Depends(auth.get_current_active_user)):
    """
    **–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    return current_user

@app.post("/upload", tags=["üìÅ –§–∞–π–ª—ã"])
async def upload_file(
    file: UploadFile = File(...), 
    bucket_name: str = "uploads",
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞**
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ MinIO —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    
    - **file**: –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    - **bucket_name**: –ò–º—è bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads")
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
        content_type = file.content_type or mimetypes.guess_type(file.filename)[0] or "application/octet-stream"
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
        file_data = io.BytesIO(await file.read())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MinIO
        success = minio_client.upload_file(
            bucket_name=bucket_name,
            object_name=file.filename,
            file_data=file_data,
            content_type=content_type
        )
        
        if success:
            return {
                "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                "filename": file.filename,
                "bucket": bucket_name,
                "size": file.size
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/files", tags=["üìÅ –§–∞–π–ª—ã"])
async def list_files(
    bucket_name: str = "uploads", 
    prefix: str = "",
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤**
    
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º bucket.
    
    - **bucket_name**: –ò–º—è bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads")
    - **prefix**: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        files = minio_client.list_files(bucket_name, prefix)
        return {
            "bucket": bucket_name,
            "files": files,
            "count": len(files)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/download/{filename}", tags=["üìÅ –§–∞–π–ª—ã"])
async def download_file(
    filename: str, 
    bucket_name: str = "uploads",
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞**
    
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ MinIO —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    
    - **filename**: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    - **bucket_name**: –ò–º—è bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads")
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        file_data = minio_client.download_file(bucket_name, filename)
        
        if file_data is None:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
        content_type = mimetypes.guess_type(filename)[0] or "application/octet-stream"
        
        return StreamingResponse(
            io.BytesIO(file_data),
            media_type=content_type,
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.delete("/files/{filename}", tags=["üìÅ –§–∞–π–ª—ã"])
async def delete_file(
    filename: str, 
    bucket_name: str = "uploads",
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞**
    
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ MinIO —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    
    - **filename**: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    - **bucket_name**: –ò–º—è bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads")
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    try:
        success = minio_client.delete_file(bucket_name, filename)
        
        if success:
            return {"message": f"–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/files/{filename}/url", tags=["üìÅ –§–∞–π–ª—ã"])
async def get_file_url(
    filename: str, 
    bucket_name: str = "uploads", 
    expires: int = 3600,
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **Presigned URL**
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É.
    
    - **filename**: –ò–º—è —Ñ–∞–π–ª–∞
    - **bucket_name**: –ò–º—è bucket (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "uploads")
    - **expires**: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3600)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç presigned URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É.
    """
    try:
        url = minio_client.get_presigned_url(bucket_name, filename, expires)
        
        if url:
            return {
                "filename": filename,
                "url": url,
                "expires_in_seconds": expires
            }
        else:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ URL")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/health", tags=["üîß –°–∏—Å—Ç–µ–º–∞"])
async def health_check():
    """
    **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è**
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ API.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å MinIO –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.
    """
    return {
        "status": "healthy",
        "minio_endpoint": minio_client.endpoint,
        "message": "FastAPI –∏ MinIO —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@app.get("/users", response_model=List[schemas.UserResponse], tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_users(
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**
    
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    - **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)
    - **limit**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
    """
    users = crud.get_users(db, skip=skip, limit=limit)
    return users

@app.get("/users/{user_id}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_user(
    user_id: int, 
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID**
    
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
    
    - **user_id**: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user

@app.put("/users/{user_id}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def update_user(
    user_id: int, 
    user_update: schemas.UserUpdate, 
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    
    - **user_id**: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **user_update**: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    db_user = crud.update_user(db, user_id=user_id, user_update=user_update)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user

@app.delete("/users/{user_id}", tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def delete_user(
    user_id: int, 
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    
    - **user_id**: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    success = crud.delete_user(db, user_id=user_id)
    if not success:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}

@app.get("/users/username/{username}", response_model=schemas.UserResponse, tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def read_user_by_username(
    username: str, 
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username**
    
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    db_user = crud.get_user_by_username(db, username=username)
    if db_user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_user

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ó–ê–î–ê–ù–ò–ô ====================

@app.post("/jobs", response_model=schemas.JobResponse, tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
async def create_job(
    background_tasks: BackgroundTasks,
    title: str = Form(None),
    description: str = Form(None),
    file: UploadFile = File(None),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è**
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ ZIP –∞—Ä—Ö–∏–≤–∞.
    
    **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:**
    - **title**: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞)
    - **description**: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    - **file**: –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ MinIO (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ ZIP –∞—Ä—Ö–∏–≤—ã)
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:**
    - –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
    - ZIP –∞—Ä—Ö–∏–≤—ã (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ï—Å–ª–∏ title –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º title - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ title –Ω–µ —É–∫–∞–∑–∞–Ω
    job_title = title
    if not job_title and file and file.filename:
        job_title = file.filename
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    job_data = schemas.JobCreate(title=job_title, description=description)
    db_job = job_crud.create_job(db=db, job=job_data, owner_id=current_user.id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ MinIO
    input_object: Optional[str] = None

    if file and file.filename:
        file_obj = file.file

        try:
            file_obj.seek(0, os.SEEK_END)
            file_size = file_obj.tell()
        except Exception:
            file_size = None
        finally:
            try:
                file_obj.seek(0)
            except Exception:
                pass

        is_zip = zip_utils.is_zip_stream(file_obj, file.filename)
        file_type = "zip" if is_zip else "single"

        try:
            file_obj.seek(0)
        except Exception:
            pass

        if is_zip:
            is_valid, error_message = zip_utils.validate_zip_stream(file_obj)
            if not is_valid:
                job_crud.delete_job(db=db, job_id=db_job.id)
                raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP —Ñ–∞–π–ª: {error_message}")

        success, file_path = minio_utils.upload_fileobj_to_minio(
            file_obj=file_obj,
            file_name=file.filename,
            content_type=file.content_type,
            size=file_size
        )

        if success:
            zip_contents = None

            if is_zip:
                try:
                    file_obj.seek(0)
                except Exception:
                    pass
                zip_contents = zip_utils.get_zip_contents_stream(file_obj)
                print(f"üì¶ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(zip_contents)} —Ñ–∞–π–ª–æ–≤")

            db_job = job_crud.update_job_file_info(
                db=db,
                job_id=db_job.id,
                file_name=file.filename,
                file_size=file_size or 0,
                file_content_type=file.content_type,
                file_path=file_path,
                file_type=file_type,
                zip_contents=zip_contents
            )
            input_object = file_path
        else:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            job_crud.delete_job(db=db, job_id=db_job.id)
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

    if input_object:
        db_job = job_crud.update_job_status(db, db_job.id, "queued") or db_job
        schedule_job_broadcast(background_tasks, db_job)
        asyncio.create_task(process_job(str(db_job.uuid), input_object))
    else:
        schedule_job_broadcast(background_tasks, db_job)

    return db_job

@app.get("/jobs", response_model=List[schemas.JobResponse], tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_user_jobs(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    - **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    - **limit**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    jobs = job_crud.get_jobs_by_owner(db=db, owner_id=current_user.id, skip=0, limit=limit)
    return jobs

@app.get("/jobs/{job_id}", response_model=schemas.JobResponse, tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_job(
    job_id: str,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ UUID**
    
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏.
    
    - **job_id**: UUID –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏.
    """
    job = job_crud.get_job_by_uuid(db=db, job_uuid=job_id)
    if job is None and job_id.isdigit():
        job = job_crud.get_job(db=db, job_id=int(job_id))
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")

    return job

@app.get("/jobs/uuid/{job_uuid}", response_model=schemas.JobResponse, tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_job_by_uuid(
    job_uuid: str,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ UUID**
    
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ –µ–≥–æ UUID.
    
    - **job_uuid**: UUID –∑–∞–¥–∞–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏.
    """
    job = job_crud.get_job_by_uuid(db=db, job_uuid=job_uuid)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    return job

@app.put("/jobs/{job_id}", response_model=schemas.JobResponse, tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def update_job(
    job_id: int,
    job_update: schemas.JobUpdate,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏.
    
    - **job_id**: ID –∑–∞–¥–∞–Ω–∏—è
    - **job_update**: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏.
    """
    job = job_crud.get_job(db=db, job_id=job_id)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    updated_job = job_crud.update_job(db=db, job_id=job_id, job_update=job_update)
    schedule_job_broadcast(background_tasks, updated_job)
    return updated_job

@app.delete("/jobs/{job_id}", tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def delete_job(
    job_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**
    
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∏–º —Ñ–∞–π–ª –∏–∑ MinIO.
    
    - **job_id**: ID –∑–∞–¥–∞–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    job = job_crud.get_job(db=db, job_id=job_id)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if job.file_path:
        minio_utils.delete_file_from_minio(job.file_path)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = job_crud.delete_job(db=db, job_id=job_id)
    if not success:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
    
    return {"message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}

@app.get("/jobs/{job_id}/file", tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def download_job_file(
    job_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è**
    
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–¥–∞–Ω–∏–µ–º.
    
    - **job_id**: ID –∑–∞–¥–∞–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    job = job_crud.get_job(db=db, job_id=job_id)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    if not job.file_path:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
    success, file_content = minio_utils.get_file_from_minio(job.file_path)
    if not success:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    return StreamingResponse(
        io.BytesIO(file_content),
        media_type=job.file_content_type or "application/octet-stream",
        headers={"Content-Disposition": f"attachment; filename={job.file_name}"}
    )

@app.get("/jobs/{job_id}/zip-contents", tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_zip_contents(
    job_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ZIP –∞—Ä—Ö–∏–≤–∞**
    
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ ZIP –∞—Ä—Ö–∏–≤–µ –∑–∞–¥–∞–Ω–∏—è.
    
    - **job_id**: ID –∑–∞–¥–∞–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ ZIP –∞—Ä—Ö–∏–≤–µ.
    """
    job = job_crud.get_job(db=db, job_id=job_id)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    if job.file_type != "zip":
        raise HTTPException(status_code=400, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ZIP –∞—Ä—Ö–∏–≤")
    
    if not job.zip_contents:
        return {"message": "ZIP –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    
    try:
        zip_contents = json.loads(job.zip_contents)
        return {
            "job_id": job.id,
            "zip_filename": job.file_name,
            "total_files": len(zip_contents),
            "files": zip_contents
        }
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ZIP –∞—Ä—Ö–∏–≤–∞")

@app.get("/jobs/{job_id}/zip-info", tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_zip_info(
    job_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user)
):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ZIP –∞—Ä—Ö–∏–≤–µ**
    
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ZIP –∞—Ä—Ö–∏–≤–µ –∑–∞–¥–∞–Ω–∏—è.
    
    - **job_id**: ID –∑–∞–¥–∞–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ZIP –∞—Ä—Ö–∏–≤–∞.
    """
    job = job_crud.get_job(db=db, job_id=job_id)
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–¥–∞–Ω–∏—è
    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")
    
    if job.file_type != "zip":
        raise HTTPException(status_code=400, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ZIP –∞—Ä—Ö–∏–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    success, file_content = minio_utils.get_file_from_minio(job.file_path)
    if not success:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    
    zip_info = zip_utils.get_zip_file_info(file_content)

    return {
        "job_id": job.id,
        "zip_filename": job.file_name,
        "file_size": job.file_size,
        "zip_info": zip_info
    }


@app.websocket("/ws/jobs/{job_id}")
async def job_updates_ws(websocket: WebSocket, job_id: str):
    await job_ws_manager.connect(job_id, websocket)

    session = SessionLocal()
    try:
        job = job_crud.get_job_by_uuid(session, job_id)
        if job is None and job_id.isdigit():
            job = job_crud.get_job(session, int(job_id))
        if job:
            await websocket.send_json(_job_payload(job))
        else:
            await websocket.send_json({"type": "job.not_found", "job_id": job_id})

        try:
            while True:
                await websocket.receive_text()
        except WebSocketDisconnect:
            pass
    finally:
        session.close()
        await job_ws_manager.disconnect(job_id, websocket)


@app.post(
    "/internal/jobs/{job_id}/completion",
    response_model=schemas.JobResponse,
    include_in_schema=False,
)
def complete_job(
    job_id: str,
    payload: schemas.JobCompletionPayload,
    background_tasks: BackgroundTasks,
    authorization: Optional[str] = Header(None),
    db: Session = Depends(get_db),
):
    _validate_ml_service_token(authorization)

    job = job_crud.get_job_by_uuid(db, job_id)
    if job is None and job_id.isdigit():
        job = job_crud.get_job(db, int(job_id))
    if job is None:
        raise HTTPException(status_code=404, detail="Job not found")

    logger.info(
        "Received completion for job %s | status=%s | object=%s | size=%s",
        job_id,
        payload.status,
        payload.output_object,
        payload.file_size,
    )

    job.status = payload.status
    if payload.output_object:
        job.file_path = payload.output_object
    if payload.file_size is not None:
        job.file_size = payload.file_size
    if payload.file_name:
        job.file_name = payload.file_name

    db.add(job)
    db.commit()
    db.refresh(job)

    schedule_job_broadcast(background_tasks, job)
    return job
@app.get("/jobs/{job_id}/results", response_model=dict, tags=["üìã –ó–∞–¥–∞–Ω–∏—è"])
def get_job_results(
    job_id: str,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(auth.get_current_active_user),
):
    job = job_crud.get_job_by_uuid(db=db, job_uuid=job_id)
    if job is None and job_id.isdigit():
        job = job_crud.get_job(db=db, job_id=int(job_id))
    if job is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if job.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é")

    if job.results_payload:
        return {
            "job_id": job_id,
            "parsed_at": job.results_parsed_at,
            "results": json.loads(job.results_payload),
            "source": "cached",
        }

    if not job.file_path:
        raise HTTPException(status_code=404, detail="–†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤")

    success, file_bytes = minio_utils.get_file_from_minio(job.file_path)
    if not success:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")

    parsed = parse_job_xlsx(file_bytes)
    job.results_payload = json.dumps(parsed, ensure_ascii=False)
    job.results_parsed_at = datetime.utcnow()
    db.add(job)
    db.commit()
    db.refresh(job)

    schedule_job_broadcast(background_tasks, job)

    return {
        "job_id": job_id,
        "parsed_at": job.results_parsed_at,
        "results": parsed,
        "source": "fresh",
    }
